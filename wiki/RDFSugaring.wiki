#summary Syntactic sugaring for defining RDF graphs in scala

= Introduction =

The Scala Semantic Web library includes some sugaring for creating RDF graphs. A simple example is as follows

{{{
import java.net.URI
import scala.rdf._

val subj = URIRef(URI.create("file:test#subj"))
val pred = URIRef(URI.create("file:test#pred"))
val obj = URIRef(URI.create("file:test#obj"))

val stat : Statement = subj ~> pred ~> obj
}}}

Here a statement is created from two hard coded URIs. This may be further simplified by the use of name spaces as follows

{{{
import java.net.URI
import scala.rdf._

val ns = NameSpace("test","file:test#")

val stat : Statement = ns&"subj" ~> ns&"pred" ~> ns&"obj"
}}}

For further simplification there are explicit conversions available in `rdf.scala.sugar`, for example we may create URIs as follows

{{{
import java.net.URI
import scala.rdf._
import scala.rdf.sugar._

val stat : Statement = ("""file:test#subj"""uri) ~> ("""file:test#pred"""uri) ~> "obj"
}}}

Graphs may be created in a Turtle like manner with mutliple predicates and objects

{{{
import java.net.URI
import scala.rdf._
import scala.rdf.sugar._

val stat : Statement = ("""file:test#subj"""uri) ~> (("""file:test#pred1"""uri) ~> "subj",
                                                     ("""file:test#pred2"""uri) ~>* ("subj1", "subj2"))
}}}

Note the operator is `~>*` if there are more than one values. The objects `RDF`, `RDFS` and `XSD` are available with the usual predicates. There also exists `RDF.base` which is used as the base name space.

Elements may be created as follows

| Type | Scala | Turtle |
|| Plain literal || "lit" || "lit" ||
|| Literal with langugage || "lit"@@"en" || "lit"@en ||
|| Typed literal || "lit"^^XSD.string || "lit"^^xsd:string ||
|| QName || nameSpace&"suffix" || namespace:suffix ||
|| QName (no prefix) || 'suffix || :suffix ||
|| URIRef || ("""http://www.example.org/"""uri) || <http://www.example.org> ||
